<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive User Hierarchy Tree</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        #tree-container {
            width: 100%;
            height: 100%;
            overflow: auto;
            border: 1px solid #ddd;
            background-color: #f9f9f9;
            margin-top: 20px;
        }
        .node circle {
            fill: #6bbf59;
            stroke: #333;
            stroke-width: 2px;
            transition: transform 0.3s;
        }
        .node:hover circle {
            transform: scale(1.2);
        }
        .node text {
    font-size: 7px;
    font-weight: bold;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    width: 100px; /* Define a fixed width */
    display: inline-block; /* Necessary for ellipsis to work */
}

       .link {
            fill: none;
            stroke: #888;
            stroke-width: 2px;
            transition: stroke 0.3s;
        }
        
        .left-link {
            stroke: #1f77b4; /* Blue color for left links */
        }
        
        .right-link {
            stroke: #ff7f0e; /* Orange color for right links */
        }
    </style>
</head>
<body>
    <h2 class="text-center">Interactive User Hierarchy Tree</h2>
    <div id="tree-container"></div>

    <script>
        // Fetch the user hierarchy tree data from the server
        const treeData = <%- userTree %>;

        // Set up SVG dimensions and margins
        const margin = { top: 20, right: 120, bottom: 20, left: 120 };

        // Dynamically adjust width based on the screen's width
        const width = window.innerWidth - margin.left - margin.right;  // Full width of the system screen
        const height = 1200 - margin.top - margin.bottom; // Keep height as is for portrait

        // Initialize the tree layout
        const treeLayout = d3.tree().size([height, width]);

        // Create SVG inside the container
        const svg = d3.select("#tree-container").append("svg")
            .attr("width", "100%")  // Set width to 100% for responsiveness
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Prepare the root data for the tree
        const root = d3.hierarchy(treeData[0]);
        treeLayout(root);

        // Links between nodes
        svg.selectAll(".link")
            .data(root.links())
            .enter().append("path")
            .attr("class", "link")
             .attr("class", d => {
                // Determine if the link is left or right
                const source = d.source;
                const target = d.target;
                return target.x < source.x ? "link left-link" : "link right-link";
            })

            .attr("d", d3.linkVertical()  // Use linkVertical for portrait orientation
                .x(d => d.x)
                .y(d => d.y));

        // Nodes of the tree
        const node = svg.selectAll(".node")
            .data(root.descendants())
            .enter().append("g")
            .attr("class", "node")
            .attr("transform", d => `translate(${d.x},${d.y})`);  // Swap x and y for portrait

        // Add circles for each node
        node.append("circle")
            .attr("r", 10);

        // Add labels for each node
          node.append("text")
            .attr("dy", 3)
            .attr("x", d => d.children ? -15 : 15)
            .style("text-anchor", d => d.children ? "end" : "start")
            .text(d => {
                const relationship = d.data.relationship ? ` (${d.data.relationship})` : '';
                const referrerName = d.data.referrer_name ? ` [Ref: ${d.data.referrer_name}]` : '';

                return `${d.data.user_name}${referrerName}`;
            });

        // Implement zoom and pan functionality
        const zoom = d3.zoom()
            .scaleExtent([0.5, 2])
            .on("zoom", (event) => {
                svg.attr("transform", event.transform);
            });

        // Apply zoom behavior to the SVG
        d3.select("#tree-container svg").call(zoom);
    </script>
</body>
</html>
